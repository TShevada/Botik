import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# ===== CONFIG =====
TOKEN = os.getenv("TELEGRAM_TOKEN", "DEFAULT_TOKEN")
YOUR_TELEGRAM_ID = int(os.getenv("ADMIN_TELEGRAM_ID", "123456789"))
PORT = int(os.getenv("PORT", 10001))  # Using your requested port
# ==================

# Initialize bot
bot = Bot(token=TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)
user_lang = {}

# Updated Ticket Data (RU/AZ/EN)
TICKET_TYPES = {
    "standard": {
        "ru": {"name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç", "price": "20 –ê–ó–ù", "desc": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏, Fan Zone"},
        "az": {"name": "Standart", "price": "20 AZN", "desc": "Xo≈ü g…ôlmisiniz kokteyll…ôri, Fan Zone"},
        "en": {"name": "Standard", "price": "20 AZN", "desc": "Welcome cocktails, Fan Zone"}
    },
    "vip_single": {
        "ru": {"name": "VIP (–û–¥–∏–Ω–æ—á–Ω—ã–π)", "price": "40 –ê–ó–ù", "desc": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –∑–∞ —Å—Ç–æ–ª–∏–∫–æ–º, –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å"},
        "az": {"name": "VIP (T…ôk)", "price": "40 AZN", "desc": "F…ôrdi oturacaq yeri, Xo≈ü g…ôlmisiniz kokteyli"},
        "en": {"name": "VIP (Single)", "price": "40 AZN", "desc": "Individual seating, Welcome cocktail"}
    },
    "vip_table": {
        "ru": {"name": "VIP (–°—Ç–æ–ª–∏–∫)", "price": "160 –ê–ó–ù", "desc": "–û—Ç–¥–µ–ª—å–Ω—ã–π —Å—Ç–æ–ª–∏–∫ –Ω–∞ 4 —á–µ–ª–æ–≤–µ–∫, –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏"},
        "az": {"name": "VIP (Masalƒ±q)", "price": "160 AZN", "desc": "4 n…ôf…ôrlik masa, Xo≈ü g…ôlmisiniz kokteyll…ôri"},
        "en": {"name": "VIP (Table)", "price": "160 AZN", "desc": "Private table for 4, Welcome cocktails"}
    },
    "exclusive": {
        "ru": {"name": "Exclusive (–°—Ç–æ–ª–∏–∫)", "price": "240 –ê–ó–ù", "desc": "–î–æ—Å—Ç—É–ø –∑–∞ DJ —Å—Ç–æ–ª–æ–º, –°—Ç–æ–ª–∏–∫ –Ω–∞ 4 —á–µ–ª–æ–≤–µ–∫, –ö–æ–∫—Ç–µ–π–ª–∏"},
        "az": {"name": "Exclusive (Masalƒ±q)", "price": "240 AZN", "desc": "DJ masasƒ±na giri≈ü, 4 n…ôf…ôrlik masa, Kokteyll…ôr"},
        "en": {"name": "Exclusive (Table)", "price": "240 AZN", "desc": "Access behind DJ booth, Table for 4, Cocktails"}
    }
}

# Keyboard Generators
def get_lang_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton(text="üá¶üáø Az…ôrbaycan")],
            [KeyboardButton(text="üá¨üáß English")]
        ],
        resize_keyboard=True
    )

def get_ticket_keyboard(lang):
    buttons = [
        [KeyboardButton(text=f"{TICKET_TYPES['standard'][lang]['name']} ({TICKET_TYPES['standard'][lang]['price']})")],
        [KeyboardButton(text=f"{TICKET_TYPES['vip_single'][lang]['name']} ({TICKET_TYPES['vip_single'][lang]['price']})")],
        [KeyboardButton(text=f"{TICKET_TYPES['vip_table'][lang]['name']} ({TICKET_TYPES['vip_table'][lang]['price']})")],
        [KeyboardButton(text=f"{TICKET_TYPES['exclusive'][lang]['name']} ({TICKET_TYPES['exclusive'][lang]['price']})")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == "ru" else "‚¨ÖÔ∏è Geri" if lang == "az" else "‚¨ÖÔ∏è Back")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# Handlers
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language / Dil se√ßin:", reply_markup=get_lang_keyboard())

@dp.message(F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¶üáø Az…ôrbaycan", "üá¨üáß English"]))
async def set_language(message: types.Message):
    lang_map = {"üá∑üá∫ –†—É—Å—Å–∫–∏–π": "ru", "üá¶üáø Az…ôrbaycan": "az", "üá¨üáß English": "en"}
    user_lang[message.from_user.id] = lang = lang_map[message.text]
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–ª–µ—Ç:" if lang == "ru" else "Bilet se√ßin:" if lang == "az" else "Select ticket:",
        reply_markup=get_ticket_keyboard(lang)
    )

@dp.message(F.text.regexp(r"(–°—Ç–∞–Ω–¥–∞—Ä—Ç|Standart|Standard|VIP.*|Exclusive)"))
async def show_ticket_info(message: types.Message):
    lang = user_lang.get(message.from_user.id, "en")
    ticket_type = None
    
    if "–°—Ç–∞–Ω–¥–∞—Ä—Ç" in message.text or "Standart" in message.text or "Standard" in message.text:
        ticket_type = "standard"
    elif "–û–¥–∏–Ω–æ—á–Ω—ã–π" in message.text or "T…ôk" in message.text or "Single" in message.text:
        ticket_type = "vip_single"
    elif "–°—Ç–æ–ª–∏–∫" in message.text or "Masalƒ±q" in message.text or "Table" in message.text:
        ticket_type = "vip_table" if "240" not in message.text else "exclusive"
    
    if ticket_type:
        await message.answer(
            f"üéü {TICKET_TYPES[ticket_type][lang]['name']}\n"
            f"üíµ {TICKET_TYPES[ticket_type][lang]['price']}\n"
            f"üìù {TICKET_TYPES[ticket_type][lang]['desc']}\n\n"
            f"‚ùóÔ∏è {'–ë–∏–ª–µ—Ç—ã –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É!' if lang == 'ru' else 'Biletl…ôr geri qaytarƒ±lmƒ±r!' if lang == 'az' else 'Tickets are non-refundable!'}"
        )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
