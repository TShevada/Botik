# ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# --- Handlers ---
@dp.message(F.text.regexp(r"(–°—Ç–∞–Ω–¥–∞—Ä—Ç|Standart|Standard|VIP|–≠–∫—Å–∫–ª—é–∑–∏–≤|Ekskl√ºziv|Exclusive).*"))
async def ticket_type_handler(message: types.Message):
    lang = user_lang.get(message.from_user.id, "en")
    
    ticket_type = None
    if "–°—Ç–∞–Ω–¥–∞—Ä—Ç" in message.text or "Standart" in message.text or "Standard" in message.text:
        ticket_type = "standard"
    elif "VIP" in message.text:
        ticket_type = "vip"
    elif "–≠–∫—Å–∫–ª—é–∑–∏–≤" in message.text or "Ekskl√ºziv" in message.text or "Exclusive" in message.text:
        ticket_type = "exclusive"
    
    if not ticket_type:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –±–∏–ª–µ—Ç–∞" if lang == "ru" else "Yanlƒ±≈ü bilet n√∂v√º" if lang == "az" else "Invalid ticket type")
        return
    
    user_data[message.from_user.id] = {
        "step": "name",
        "lang": lang,
        "ticket_type": ticket_type,
        "ticket_price": TICKET_TYPES[ticket_type][lang]["price"]
    }
    
    prompt = {
        "ru": "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é:",
        "az": "Bilet almaq √º√ß√ºn ad v…ô soyadƒ±nƒ±zƒ± daxil edin:",
        "en": "To buy tickets, please enter your First and Last name:"
    }[lang]
    
    await message.answer(prompt, reply_markup=types.ReplyKeyboardRemove())

@dp.message(lambda m: user_data.get(m.from_user.id, {}).get("step") == "name")
async def get_name(message: types.Message):
    user_data[message.from_user.id]["name"] = message.text
    user_data[message.from_user.id]["step"] = "phone"
    lang = user_data[message.from_user.id].get("lang", "en")
    
    prompt = {
        "ru": "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        "az": "ƒ∞ndi telefon n√∂mr…ônizi daxil edin:",
        "en": "Now please enter your phone number:"
    }[lang]
    
    await message.answer(prompt)

@dp.message(lambda m: user_data.get(m.from_user.id, {}).get("step") == "phone")
async def get_phone(message: types.Message):
    phone = message.text
    if not phone.replace('+', '').isdigit() or len(phone) < 9:
        lang = user_data[message.from_user.id].get("lang", "en")
        error_msg = {
            "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            "az": "Z…ôhm…ôt olmasa, d√ºzg√ºn telefon n√∂mr…ôsi daxil edin",
            "en": "Please enter a valid phone number"
        }[lang]
        await message.answer(error_msg)
        return
    
    user_data[message.from_user.id]["phone"] = phone
    user_data[message.from_user.id]["step"] = "confirm"
    lang = user_data[message.from_user.id].get("lang", "en")
    
    ticket_type = user_data[message.from_user.id]["ticket_type"]
    ticket_info = TICKET_TYPES[ticket_type][lang]
    
    confirmation = {
        "ru": f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
              f"üéü –¢–∏–ø –±–∏–ª–µ—Ç–∞: {ticket_info['name']}\n"
              f"üí≥ –°—É–º–º–∞: {ticket_info['price']}\n"
              f"üë§ –ò–º—è: {user_data[message.from_user.id]['name']}\n"
              f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
              f"–í—Å–µ –≤–µ—Ä–Ω–æ?",
        "az": f"M…ôlumatlarƒ±nƒ±zƒ± yoxlayƒ±n:\n\n"
              f"üéü Bilet n√∂v√º: {ticket_info['name']}\n"
              f"üí≥ M…ôbl…ôƒü: {ticket_info['price']}\n"
              f"üë§ Ad: {user_data[message.from_user.id]['name']}\n"
              f"üì± Telefon: {phone}\n\n"
              f"H…ôr ≈üey d√ºzg√ºnd√ºr?",
        "en": f"Please confirm your details:\n\n"
              f"üéü Ticket type: {ticket_info['name']}\n"
              f"üí≥ Amount: {ticket_info['price']}\n"
              f"üë§ Name: {user_data[message.from_user.id]['name']}\n"
              f"üì± Phone: {phone}\n\n"
              f"Is everything correct?"
    }[lang]
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –î–∞" if lang == "ru" else "‚úÖ B…ôli" if lang == "az" else "‚úÖ Yes")],
            [KeyboardButton(text="‚ùå –ù–µ—Ç" if lang == "ru" else "‚ùå Xeyr" if lang == "az" else "‚ùå No")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(confirmation, reply_markup=keyboard)

@dp.message(F.text.in_(["‚úÖ –î–∞", "‚úÖ B…ôli", "‚úÖ Yes"]))
async def confirm_purchase(message: types.Message):
    if message.from_user.id not in user_data:
        return
    
    lang = user_data[message.from_user.id].get("lang", "en")
    user_data[message.from_user.id]["step"] = "payment"
    
    payment_info = {
        "ru": f"–û–ø–ª–∞—Ç–∏—Ç–µ {user_data[message.from_user.id]['ticket_price']} –Ω–∞ –∫–∞—Ä—Ç—É: `{PAYMENT_CARD}`\n"
              "–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.",
        "az": f"{user_data[message.from_user.id]['ticket_price']} m…ôbl…ôƒüini kartla √∂d…ôyin: `{PAYMENT_CARD}`\n"
              "v…ô √∂d…ôni≈ü skrin≈üotu g√∂nd…ôrin.",
        "en": f"Please pay {user_data[message.from_user.id]['ticket_price']} to card: `{PAYMENT_CARD}`\n"
              "and send payment screenshot."
    }[lang]
    
    await message.answer(payment_info, reply_markup=get_menu_keyboard(lang))

@dp.message(F.text.in_(["‚ùå –ù–µ—Ç", "‚ùå Xeyr", "‚ùå No"]))
async def cancel_purchase(message: types.Message):
    lang = user_lang.get(message.from_user.id, "en")
    if message.from_user.id in user_data:
        del user_data[message.from_user.id]
    
    msg = {
        "ru": "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        "az": "Sifari≈ü l…ôƒüv edildi. Yenid…ôn ba≈ülaya bil…ôrsiniz.",
        "en": "Order canceled. You can start again."
    }[lang]
    
    await message.answer(msg, reply_markup=get_menu_keyboard(lang))

@dp.message(lambda m: user_data.get(m.from_user.id, {}).get("step") == "payment")
async def handle_payment(message: types.Message):
    lang = user_data[message.from_user.id].get("lang", "en")
    
    if message.photo:
        try:
            photo = message.photo[-1]
            file = await bot.get_file(photo.file_id)
            path = f"{PHOTOS_DIR}/{message.from_user.id}_{photo.file_id}.jpg"
            await bot.download_file(file.file_path, path)
            
            if save_to_excel(
                message.from_user.id,
                user_data[message.from_user.id]["name"],
                user_data[message.from_user.id]["phone"],
                user_data[message.from_user.id]["ticket_type"],
                user_data[message.from_user.id]["ticket_price"],
                path
            ):
                await notify_admin(
                    message.from_user.id,
                    user_data[message.from_user.id]["name"],
                    user_data[message.from_user.id]["phone"],
                    user_data[message.from_user.id]["ticket_type"],
                    user_data[message.from_user.id]["ticket_price"]
                )
                
                confirmation = {
                    "ru": "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.",
                    "az": "T…ô≈ü…ôkk√ºrl…ôr! M√ºraci…ôtiniz n…ôz…ôrd…ôn ke√ßirilir.",
                    "en": "Thank you! Your application is under review."
                }[lang]
                
                await message.answer(confirmation, reply_markup=get_menu_keyboard(lang))
                del user_data[message.from_user.id]
            
        except Exception as e:
            logger.error(f"Payment processing error: {e}")
            error_msg = {
                "ru": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                "az": "√ñd…ôni≈ü emalƒ± x…ôtasƒ±, yenid…ôn c…ôhd edin",
                "en": "Payment processing error, please try again"
            }[lang]
            await message.answer(error_msg)
    else:
        prompt = {
            "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.",
            "az": "Z…ôhm…ôt olmasa, √∂d…ôni≈ü skrin≈üotu g√∂nd…ôrin.",
            "en": "Please send the payment screenshot."
        }[lang]
        await message.answer(prompt)

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
