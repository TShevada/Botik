import os
import random
import string
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# --- CONFIGURATION ---
TOKEN = "7883966462:AAG2udLydnyXDibLWyw8WrlVntzUB-KMXfE"  # Your Telegram bot token
ADMIN_ID = 1291104906  # Your Telegram user ID
PORT = 10001  # Your specified port

bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- STATES ---
class Form(StatesGroup):
    lang = State()
    name = State()
    phone = State()
    ticket = State()
    photo = State()

# --- TICKET DATA ---
TICKETS = {
    'ru': {
        'standard': ('–°—Ç–∞–Ω–¥–∞—Ä—Ç (20 –ê–ó–ù)', '–ö–æ–∫—Ç–µ–π–ª–∏, Fan Zone'),
        'vip_single': ('VIP (40 –ê–ó–ù)', '–ú–µ—Å—Ç–æ + –∫–æ–∫—Ç–µ–π–ª—å'),
        'vip_table': ('VIP –°—Ç–æ–ª–∏–∫ (160 –ê–ó–ù)', '–°—Ç–æ–ª –Ω–∞ 4'),
        'exclusive_single': ('Exclusive (60 –ê–ó–ù)', '–î–æ—Å—Ç—É–ø –∫ DJ'),
        'exclusive_table': ('Exclusive (240 –ê–ó–ù)', 'VIP –∑–æ–Ω–∞ + —Å—Ç–æ–ª') 
    },
    'az': {
        'standard': ('Standart (20 AZN)', 'Kokteyll…ôr, Fan Zone'),
        'vip_single': ('VIP (40 AZN)', 'Oturacaq + kokteyl'),
        'vip_table': ('VIP Masa (160 AZN)', '4 n…ôf…ôrlik masa'),
        'exclusive_single': ('Exclusive (60 AZN)', 'DJ giri≈üi'),
        'exclusive_table': ('Exclusive (240 AZN)', 'VIP zona + masa')
    },
    'en': {
        'standard': ('Standard (20 AZN)', 'Cocktails, Fan Zone'),
        'vip_single': ('VIP (40 AZN)', 'Seat + cocktail'),
        'vip_table': ('VIP Table (160 AZN)', 'Table for 4'),
        'exclusive_single': ('Exclusive (60 AZN)', 'DJ access'),
        'exclusive_table': ('Exclusive (240 AZN)', 'VIP area + table')
    }
}

# --- UTILITIES ---
def generate_ticket_number():
    return f"TKT-{''.join(random.choices(string.ascii_uppercase + string.digits, k=8))}"

def get_lang_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π")],
            [types.KeyboardButton(text="üá¶üáø Az…ôrbaycan")],
            [types.KeyboardButton(text="üá¨üáß English")]
        ],
        resize_keyboard=True
    )

# --- HANDLERS ---
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.set_state(Form.lang)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Dil se√ßin / Select language:", 
                        reply_markup=get_lang_keyboard())

@dp.message(Form.lang)
async def set_language(message: types.Message, state: FSMContext):
    if message.text not in ["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¶üáø Az…ôrbaycan", "üá¨üáß English"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
    
    lang = "ru" if "üá∑üá∫" in message.text else "az" if "üá¶üáø" in message.text else "en"
    await state.update_data(lang=lang)
    await state.set_state(Form.name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:" if lang == "ru" else
        "Ad v…ô soyadƒ±nƒ±zƒ± daxil edin:" if lang == "az" else
        "Enter your full name:",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    if len(message.text.split()) < 2:
        data = await state.get_data()
        lang = data.get('lang', 'en')
        return await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é:" if lang == "ru" else
            "Ad v…ô soyadƒ±nƒ±zƒ± tam daxil edin:" if lang == "az" else
            "Please enter full name:"
        )
    
    await state.update_data(name=message.text)
    await state.set_state(Form.phone)
    data = await state.get_data()
    lang = data.get('lang', 'en')
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:" if lang == "ru" else
        "Telefon n√∂mr…ônizi daxil edin:" if lang == "az" else
        "Enter your phone number:"
    )

@dp.message(Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    if not message.text.replace('+', '').isdigit():
        data = await state.get_data()
        lang = data.get('lang', 'en')
        return await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:" if lang == "ru" else
            "Yanlƒ±≈ü telefon n√∂mr…ôsi. Yenid…ôn c…ôhd edin:" if lang == "az" else
            "Invalid phone number. Try again:"
        )
    
    await state.update_data(phone=message.text)
    data = await state.get_data()
    lang = data.get('lang', 'en')
    
    buttons = [[types.KeyboardButton(text=ticket[0])] for ticket in TICKETS[lang].values()]
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–ª–µ—Ç:" if lang == "ru" else "Bilet se√ßin:" if lang == "az" else "Select ticket:",
        reply_markup=types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    )
    await state.set_state(Form.ticket)

@dp.message(Form.ticket)
async def process_ticket(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('lang', 'en')
    
    # Find selected ticket
    selected = None
    for ticket_type, (name, desc) in TICKETS[lang].items():
        if name in message.text:
            selected = (ticket_type, name, desc)
            break
    
    if not selected:
        buttons = [[types.KeyboardButton(text=ticket[0])] for ticket in TICKETS[lang].values()]
        return await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–∏–ª–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:" if lang == "ru" else
            "Z…ôhm…ôt olmasa siyahƒ±dan bilet se√ßin:" if lang == "az" else
            "Please select ticket from the list:",
            reply_markup=types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
        )
    
    ticket_number = generate_ticket_number()
    await state.update_data(ticket_type=selected[0], ticket_name=selected[1], ticket_number=ticket_number)
    
    await message.answer(
        f"üé´ {selected[1]}\n"
        f"üìù {selected[2]}\n\n"
        f"üî¢ –ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞: {ticket_number}\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã:" if lang == "ru" else
        f"üé´ {selected[1]}\n"
        f"üìù {selected[2]}\n\n"
        f"üî¢ Bilet n√∂mr…ôsi: {ticket_number}\n"
        "üì∏ √ñd…ôni≈ü ≈ü…ôklini g√∂nd…ôrin:" if lang == "az" else
        f"üé´ {selected[1]}\n"
        f"üìù {selected[2]}\n\n"
        f"üî¢ Ticket number: {ticket_number}\n"
        "üì∏ Send payment photo:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(Form.photo)

@dp.message(Form.photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('lang', 'en')
    ticket_number = data.get('ticket_number', 'UNKNOWN')
    
    # Send confirmation to user
    await message.answer(
        f"‚úÖ –ë–∏–ª–µ—Ç {ticket_number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
        "‚ùóÔ∏è –ë–∏–ª–µ—Ç—ã –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É" if lang == "ru" else
        f"‚úÖ Bilet {ticket_number} t…ôsdiql…ôndi!\n"
        "‚ùóÔ∏è Biletl…ôr geri qaytarƒ±lmƒ±r" if lang == "az" else
        f"‚úÖ Ticket {ticket_number} confirmed!\n"
        "‚ùóÔ∏è Tickets are non-refundable"
    )
    
    # Notify admin
    await bot.send_photo(
        ADMIN_ID,
        message.photo[-1].file_id,
        caption=(
            f"üé´ –ù–æ–≤—ã–π –±–∏–ª–µ—Ç: {ticket_number}\n"
            f"üë§ {data.get('name')}\n"
            f"üìû {data.get('phone')}\n"
            f"üíµ {data.get('ticket_name')}"
        )
    )
    
    await state.clear()

# --- ADMIN COMMANDS ---
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="/stats")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(Command("stats"))
async def show_stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å")

# --- RUN THE BOT ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
