import os
import logging
import asyncio
import random
import string
from datetime import datetime
from collections import defaultdict
from typing import Dict, Any

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandObject
from aiogram.types import (
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    ReplyKeyboardMarkup, 
    KeyboardButton
)

# Configuration
TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = 1291104906
PORT = int(os.getenv("PORT", "8080"))  # Now properly closed
PAYMENT_CARD = "4169 7388 9268 3164"

# Setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()

# Data Storage
user_lang = {}
user_data = {}
pending_approvals = {}
approved_tickets = defaultdict(list)

# Helper Functions
def generate_ticket_id():
    return ''.join(random.choices(string.digits, k=6))

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

def get_lang_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton(text="üá¶üáø Az…ôrbaycan")],
            [KeyboardButton(text="üá¨üáß English")]
        ],
        resize_keyboard=True
    )

def get_menu_keyboard(lang):
    if lang == "ru":
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üé´ –ë–∏–ª–µ—Ç—ã")],
                [KeyboardButton(text="üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è")],
                [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
                [KeyboardButton(text="üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")]
            ],
            resize_keyboard=True
        )
    elif lang == "az":
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üé´ Biletl…ôr")],
                [KeyboardButton(text="üìÖ Yaxƒ±n t…ôdbirl…ôr")],
                [KeyboardButton(text="üìû ∆èlaq…ô")],
                [KeyboardButton(text="üåê Dil d…ôyi≈ü")]
            ],
            resize_keyboard=True
        )
    else:  # English
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üé´ Tickets")],
                [KeyboardButton(text="üìÖ Upcoming events")],
                [KeyboardButton(text="üìû Contacts")],
                [KeyboardButton(text="üåê Change language")]
            ],
            resize_keyboard=True
        )

def get_ticket_type_keyboard(lang):
    buttons = []
    for ticket_type in TICKET_TYPES:
        buttons.append([KeyboardButton(text=TICKET_TYPES[ticket_type][lang]["name"])])
    
    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == "ru" else "‚¨ÖÔ∏è Geri" if lang == "az" else "‚¨ÖÔ∏è Back"
    buttons.append([KeyboardButton(text=back_text)])
    
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# Ticket Types with Payment Notes
TICKET_TYPES = {
    "standard": {
        "az": {
            "name": "Standard ‚Äî 20 AZN",
            "full_info": (
                "Standard ‚Äî 20 AZN\n"
                "‚Ä¢ Qar≈üƒ±lama kokteyll…ôri\n"
                "‚Ä¢ Fan Zonasƒ±\n\n"
                "‚ùóÔ∏èN…ôz…ôriniz…ô √ßatdƒ±rƒ±rƒ±q ki, biletl…ôr alƒ±ndƒ±qdan sonra geri qaytarƒ±lmƒ±r"
            ),
            "note": "√ñd…ôni≈ü etdikd…ôn sonra skrin≈üot g√∂nd…ôrm…ôyi unutmayƒ±n!"
        },
        "ru": {
            "name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç ‚Äî 20 AZN", 
            "full_info": (
                "–°—Ç–∞–Ω–¥–∞—Ä—Ç ‚Äî 20 AZN\n"
                "‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏\n"
                "‚Ä¢ Fan Zone\n\n"
                "‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –±–∏–ª–µ—Ç—ã –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏"
            ),
            "note": "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã!"
        },
        "en": {
            "name": "Standard ‚Äî 20 AZN",
            "full_info": (
                "Standard ‚Äî 20 AZN\n"
                "‚Ä¢ Welcome cocktails\n"
                "‚Ä¢ Fan Zone\n\n"
                "‚ùóÔ∏èPlease note that tickets cannot be refunded after purchase"
            ),
            "note": "Don't forget to send payment screenshot!"
        }
    },
    "vip_single": {
        "az": {
            "name": "VIP (F…ôrdi) ‚Äî 40 AZN",
            "full_info": (
                "VIP (F…ôrdi) ‚Äî 40 AZN\n"
                "‚Ä¢ F…ôrdi masa yeri\n"
                "‚Ä¢ Qar≈üƒ±lama kokteyli\n"
                "‚Ä¢ Yerl…ôrin sayƒ± m…ôhduddur\n\n"
                "‚ùóÔ∏èN…ôz…ôriniz…ô √ßatdƒ±rƒ±rƒ±q ki, biletl…ôr alƒ±ndƒ±qdan sonra geri qaytarƒ±lmƒ±r"
            ),
            "note": "√ñd…ôni≈ü etdikd…ôn sonra skrin≈üot g√∂nd…ôrm…ôyi unutmayƒ±n!"
        },
        "ru": {
            "name": "VIP (–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π) ‚Äî 40 AZN",
            "full_info": (
                "VIP (–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π) ‚Äî 40 AZN\n"
                "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ\n"
                "‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å\n"
                "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n\n"
                "‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –±–∏–ª–µ—Ç—ã –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏"
            ),
            "note": "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã!"
        },
        "en": {
            "name": "VIP (Single) ‚Äî 40 AZN", 
            "full_info": (
                "VIP (Single) ‚Äî 40 AZN\n"
                "‚Ä¢ Individual seat\n"
                "‚Ä¢ Welcome cocktail\n"
                "‚Ä¢ Limited seats available\n\n"
                "‚ùóÔ∏èPlease note that tickets cannot be refunded after purchase"
            ),
            "note": "Don't forget to send payment screenshot!"
        }
    },
    "vip_table": {
        "az": {
            "name": "VIP (Masa) ‚Äî 160 AZN",
            "full_info": (
                "VIP (Masa) ‚Äî 160 AZN\n"
                "‚Ä¢ 4 n…ôf…ôrlik ayrƒ±ca masa\n"
                "‚Ä¢ B√ºt√ºn ≈üirk…ôt √º√ß√ºn qar≈üƒ±lama kokteyll…ôri\n"
                "‚Ä¢ Yerl…ôrin sayƒ± m…ôhduddur\n\n"
                "‚ùóÔ∏èN…ôz…ôriniz…ô √ßatdƒ±rƒ±rƒ±q ki, biletl…ôr alƒ±ndƒ±qdan sonra geri qaytarƒ±lmƒ±r"
            ),
            "note": "√ñd…ôni≈ü etdikd…ôn sonra skrin≈üot g√∂nd…ôrm…ôyi unutmayƒ±n!"
        },
        "ru": {
            "name": "VIP (–°—Ç–æ–ª–∏–∫) ‚Äî 160 AZN",
            "full_info": (
                "VIP (–°—Ç–æ–ª–∏–∫) ‚Äî 160 AZN\n"
                "‚Ä¢ –°—Ç–æ–ª–∏–∫ –Ω–∞ 4 –ø–µ—Ä—Å–æ–Ω—ã\n"
                "‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏ –¥–ª—è –≤—Å–µ–π –∫–æ–º–ø–∞–Ω–∏–∏\n"
                "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n\n"
                "‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –±–∏–ª–µ—Ç—ã –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏"
            ),
            "note": "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã!"
        },
        "en": {
            "name": "VIP (Table) ‚Äî 160 AZN",
            "full_info": (
                "VIP (Table) ‚Äî 160 AZN\n"
                "‚Ä¢ Table for 4 people\n"
                "‚Ä¢ Welcome cocktails for whole group\n"
                "‚Ä¢ Limited seats available\n\n"
                "‚ùóÔ∏èPlease note that tickets cannot be refunded after purchase"
            ),
            "note": "Don't forget to send payment screenshot!"
        }
    },
    "exclusive_table": {
        "az": {
            "name": "Exclusive (Masa) ‚Äî 240 AZN",
            "full_info": (
                "Exclusive (Masa) ‚Äî 240 AZN\n"
                "‚Ä¢ DJ masasƒ±nƒ±n yanƒ±nda giri≈ü imkanƒ±\n"
                "‚Ä¢ 4 n…ôf…ôrlik ayrƒ±ca masa\n"
                "‚Ä¢ B√ºt√ºn ≈üirk…ôt √º√ß√ºn qar≈üƒ±lama kokteyll…ôri\n"
                "‚Ä¢ Yerl…ôrin sayƒ± m…ôhduddur\n\n"
                "‚ùóÔ∏èN…ôz…ôriniz…ô √ßatdƒ±rƒ±rƒ±q ki, biletl…ôr alƒ±ndƒ±qdan sonra geri qaytarƒ±lmƒ±r"
            ),
            "note": "√ñd…ôni≈ü etdikd…ôn sonra skrin≈üot g√∂nd…ôrm…ôyi unutmayƒ±n!"
        },
        "ru": {
            "name": "Exclusive (–°—Ç–æ–ª–∏–∫) ‚Äî 240 AZN",
            "full_info": (
                "Exclusive (–°—Ç–æ–ª–∏–∫) ‚Äî 240 AZN\n"
                "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ DJ-–∑–æ–Ω–µ\n"
                "‚Ä¢ –°—Ç–æ–ª–∏–∫ –Ω–∞ 4 –ø–µ—Ä—Å–æ–Ω—ã\n"
                "‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏ –¥–ª—è –≤—Å–µ–π –∫–æ–º–ø–∞–Ω–∏–∏\n"
                "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n\n"
                "‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –±–∏–ª–µ—Ç—ã –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏"
            ),
            "note": "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã!"
        },
        "en": {
            "name": "Exclusive (Table) ‚Äî 240 AZN",
            "full_info": (
                "Exclusive (Table) ‚Äî 240 AZN\n"
                "‚Ä¢ DJ area access\n"
                "‚Ä¢ Table for 4 people\n"
                "‚Ä¢ Welcome cocktails for whole group\n"
                "‚Ä¢ Limited seats available\n\n"
                "‚ùóÔ∏èPlease note that tickets cannot be refunded after purchase"
            ),
            "note": "Don't forget to send payment screenshot!"
        }
    }
}

# Handlers
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language / Dil se√ßin:", reply_markup=get_lang_keyboard())

@dp.message(F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¶üáø Az…ôrbaycan", "üá¨üáß English"]))
async def set_language(message: types.Message):
    lang_map = {
        "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "ru",
        "üá¶üáø Az…ôrbaycan": "az",
        "üá¨üáß English": "en"
    }
    user_lang[message.from_user.id] = lang_map[message.text]
    await message.answer(
        "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π" if lang_map[message.text] == "ru" else
        "Dil se√ßildi: Az…ôrbaycan" if lang_map[message.text] == "az" else
        "Language set: English",
        reply_markup=get_menu_keyboard(lang_map[message.text])
    )

@dp.message(F.text.in_(["üé´ –ë–∏–ª–µ—Ç—ã", "üé´ Biletl…ôr", "üé´ Tickets"]))
async def tickets_menu_handler(message: types.Message):
    lang = user_lang.get(message.from_user.id, "en")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–ª–µ—Ç–∞:" if lang == "ru" else 
        "Bilet n√∂v√ºn√º se√ßin:" if lang == "az" else 
        "Select ticket type:",
        reply_markup=get_ticket_type_keyboard(lang)
    )

async def back_handler(message: types.Message):
    lang = user_lang.get(message.from_user.id, "en")
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if lang == "ru" else
        "∆èsas menyu" if lang == "az" else
        "Main menu",
        reply_markup=get_menu_keyboard(lang)
    )

@dp.message(F.text.in_(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è Geri", "‚¨ÖÔ∏è Back"]))
async def handle_back(message: types.Message):
    await back_handler(message)

@dp.message(F.text)
async def handle_text_messages(message: types.Message):
    # Check if user is in the middle of a process
    if message.from_user.id in user_data and user_data[message.from_user.id].get("step") in ["name", "phone", "confirm"]:
        # Let the specific handlers deal with these cases
        return
        
    lang = user_lang.get(message.from_user.id, "en")
    
    # Check if this is a ticket type selection
    selected_ticket = None
    for ticket_type, data in TICKET_TYPES.items():
        if message.text == data[lang]["name"]:
            selected_ticket = ticket_type
            break
    
    if selected_ticket:
        # Process ticket selection
        await message.answer(TICKET_TYPES[selected_ticket][lang]["full_info"])
        
        user_data[message.from_user.id] = {
            "step": "name",
            "lang": lang,
            "ticket_type": selected_ticket,
            "ticket_price": TICKET_TYPES[selected_ticket][lang]["name"].split("‚Äî")[1].strip()
        }
        
        await message.answer(
            "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é:" if lang == "ru" else
            "Bilet almaq √º√ß√ºn ad v…ô soyadƒ±nƒ±zƒ± daxil edin:" if lang == "az" else
            "To buy tickets, enter your First and Last name:",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        # Not a ticket selection, check if it's a menu item
        if message.text in ["üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è", "üìÖ Yaxƒ±n t…ôdbirl…ôr", "üìÖ Upcoming events"]:
            await message.answer(
                "–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç –∑–¥–µ—Å—å" if lang == "ru" else
                "Yaxƒ±n t…ôdbirl…ôr burada olacaq" if lang == "az" else
                "Upcoming events will be here"
            )
        elif message.text in ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "üìû ∆èlaq…ô", "üìû Contacts"]:
            await message.answer(
                "–ö–æ–Ω—Ç–∞–∫—Ç—ã: @username" if lang == "ru" else
                "∆èlaq…ô: @username" if lang == "az" else
                "Contacts: @username"
            )
        elif message.text in ["üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "üåê Dil d…ôyi≈ü", "üåê Change language"]:
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:" if lang == "ru" else
                "Dil se√ßin:" if lang == "az" else
                "Select language:",
                reply_markup=get_lang_keyboard()
            )

@dp.message(lambda m: user_data.get(m.from_user.id, {}).get("step") == "name")
async def get_name(message: types.Message):
    if not message.text or len(message.text) < 2:
        lang = user_data[message.from_user.id].get("lang", "en")
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)" if lang == "ru" else
            "D√ºzg√ºn ad daxil edin (minimum 2 simvol)" if lang == "az" else
            "Enter valid name (min 2 characters)"
        )
        return
        
    user_data[message.from_user.id]["name"] = message.text
    user_data[message.from_user.id]["step"] = "phone"
    lang = user_data[message.from_user.id].get("lang", "en")
    
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:" if lang == "ru" else
        "ƒ∞ndi telefon n√∂mr…ônizi daxil edin:" if lang == "az" else
        "Now please enter your phone number:"
    )

@dp.message(lambda m: user_data.get(m.from_user.id, {}).get("step") == "phone")
async def get_phone(message: types.Message):
    phone = message.text
    cleaned_phone = ''.join(c for c in phone if c.isdigit() or c == '+')
    
    if len(cleaned_phone) < 9 or (cleaned_phone.startswith('+') and len(cleaned_phone) < 12):
        lang = user_data[message.from_user.id].get("lang", "en")
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (–º–∏–Ω–∏–º—É–º 9 —Ü–∏—Ñ—Ä)" if lang == "ru" else
            "D√ºzg√ºn n√∂mr…ô daxil edin (minimum 9 r…ôq…ôm)" if lang == "az" else
            "Enter valid number (min 9 digits)"
        )
        return
    
    user_data[message.from_user.id]["phone"] = cleaned_phone
    user_data[message.from_user.id]["step"] = "confirm"
    lang = user_data[message.from_user.id].get("lang", "en")
    ticket_info = TICKET_TYPES[user_data[message.from_user.id]["ticket_type"]][lang]
    
    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\nüéü {ticket_info['name']}\nüë§ {user_data[message.from_user.id]['name']}\nüì± {cleaned_phone}" if lang == "ru" else
        f"M…ôlumatlarƒ± yoxlayƒ±n:\n\nüéü {ticket_info['name']}\nüë§ {user_data[message.from_user.id]['name']}\nüì± {cleaned_phone}" if lang == "az" else
        f"Check details:\n\nüéü {ticket_info['name']}\nüë§ {user_data[message.from_user.id]['name']}\nüì± {cleaned_phone}",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞" if lang == "ru" else "‚úÖ B…ôli" if lang == "az" else "‚úÖ Yes")],
                [KeyboardButton(text="‚ùå –ù–µ—Ç" if lang == "ru" else "‚ùå Xeyr" if lang == "az" else "‚ùå No")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(F.text.in_(["‚úÖ –î–∞", "‚úÖ B…ôli", "‚úÖ Yes"]))
async def confirm_purchase(message: types.Message):
    if message.from_user.id not in user_data:
        lang = user_lang.get(message.from_user.id, "en")
        await message.answer(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏" if lang == "ru" else
            "Aktiv m√ºraci…ôt yoxdur" if lang == "az" else
            "No active application",
            reply_markup=get_menu_keyboard(lang)
        )
        return
    
    lang = user_data[message.from_user.id].get("lang", "en")
    user_data[message.from_user.id]["step"] = "payment"
    
    await message.answer(
        f"–û–ø–ª–∞—Ç–∏—Ç–µ {user_data[message.from_user.id]['ticket_price']} –Ω–∞ –∫–∞—Ä—Ç—É: `{PAYMENT_CARD}`\n"
        "–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.\n\n"
        f"{TICKET_TYPES[user_data[message.from_user.id]['ticket_type']][lang]['note']}",
        reply_markup=get_menu_keyboard(lang)
    )

@dp.message(F.text.in_(["‚ùå –ù–µ—Ç", "‚ùå Xeyr", "‚ùå No"]))
async def cancel_purchase(message: types.Message):
    if message.from_user.id in user_data:
        lang = user_data[message.from_user.id].get("lang", "en")
        del user_data[message.from_user.id]
        await message.answer(
            "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞" if lang == "ru" else
            "Alƒ±≈ü etm…ôk l…ôƒüv edildi" if lang == "az" else
            "Purchase canceled",
            reply_markup=get_menu_keyboard(lang)
        )

@dp.message(F.photo, lambda m: user_data.get(m.from_user.id, {}).get("step") == "payment")
async def handle_payment_photo(message: types.Message):
    if message.from_user.id not in user_data:
        return
        
    lang = user_data[message.from_user.id].get("lang", "en")
    try:
        ticket_id = generate_ticket_id()
        pending_approvals[message.from_user.id] = {
            **user_data[message.from_user.id],
            "photo_id": message.photo[-1].file_id,
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "ticket_id": ticket_id,
            "username": message.from_user.username or "N/A"
        }
        
        # Notify admin
        ticket_name = TICKET_TYPES[pending_approvals[message.from_user.id]["ticket_type"]]["ru"]["name"]
        await bot.send_photo(
            ADMIN_ID,
            message.photo[-1].file_id,
            caption=(
                f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{ticket_id}\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{pending_approvals[message.from_user.id]['username']} [ID:{message.from_user.id}]\n"
                f"üìù –ò–º—è: {user_data[message.from_user.id]['name']}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[message.from_user.id]['phone']}\n"
                f"üéü –¢–∏–ø: {ticket_name} ({user_data[message.from_user.id]['ticket_price']})\n\n"
                f"–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                f"/approve_{message.from_user.id} - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\n"
                f"/reject_{message.from_user.id} [–ø—Ä–∏—á–∏–Ω–∞] - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å"
            )
        )
        
        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ #{ticket_id} –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏" if lang == "ru" else
            f"‚úÖ T…ô≈ü…ôkk√ºrl…ôr! {ticket_id} n√∂mr…ôli m√ºraci…ôtiniz n…ôz…ôrd…ôn ke√ßirilir" if lang == "az" else
            f"‚úÖ Thank you! Application #{ticket_id} is under review",
            reply_markup=get_menu_keyboard(lang)
        )
        del user_data[message.from_user.id]
    except Exception as e:
        logger.error(f"Payment error: {e}")
        await message.answer(
            "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞" if lang == "ru" else
            "√ñd…ôni≈ü emalƒ± x…ôtasƒ±" if lang == "az" else
            "Payment processing error"
        )

@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    text = "üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
    text += f"‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {len(pending_approvals)}\n"
    text += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤: {sum(len(v) for v in approved_tickets.values())}\n\n"
    text += "–ö–æ–º–∞–Ω–¥—ã:\n"
    text += "/pending - —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫\n"
    text += "/approved - —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤"
    
    await message.answer(text)

@dp.message(Command("pending"))
async def show_pending(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    if not pending_approvals:
        await message.answer("‚è≥ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏")
        return
    
    text = "‚è≥ –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:\n\n"
    for user_id, data in pending_approvals.items():
        ticket_name = TICKET_TYPES[data["ticket_type"]]["ru"]["name"]
        text += (
            f"üÜî #{data['ticket_id']}\n"
            f"üë§ @{data['username']} [ID:{user_id}]\n"
            f"üìù {data['name']} | üì± {data['phone']}\n"
            f"üéü {ticket_name} ({data['ticket_price']})\n"
            f"üïí {data['date']}\n"
            f"üîπ /approve_{user_id} | /reject_{user_id} [–ø—Ä–∏—á–∏–Ω–∞]\n\n"
        )
    
    await message.answer(text)

@dp.message(Command("approved"))
async def show_approved(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    if not approved_tickets:
        await message.answer("‚úÖ –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤")
        return
    
    text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã:\n\n"
    for user_id, tickets in approved_tickets.items():
        for ticket in tickets:
            ticket_name = TICKET_TYPES[ticket["ticket_type"]]["ru"]["name"]
            text += (
                f"üÜî #{ticket['ticket_id']}\n"
                f"üë§ ID:{user_id}\n"
                f"üéü {ticket_name}\n"
                f"üïí {ticket['date']}\n\n"
            )
    
    await message.answer(text)

@dp.message(Command(commands=["approve", "reject"]))
async def handle_admin_approval(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    try:
        # Extract command and user_id from text like "/approve_12345" or "/reject_12345 reason"
        command_parts = message.text.split('_')
        if len(command_parts) < 2:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /approve_12345 –∏–ª–∏ /reject_12345 –ø—Ä–∏—á–∏–Ω–∞")
            return
            
        command = command_parts[0][1:]  # Remove leading slash
        user_id = int(command_parts[1].split()[0])  # Get user_id before any space
        data = pending_approvals.get(user_id)
        
        if not data:
            await message.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        if command == "approve":
            approved_tickets[user_id].append({
                "ticket_id": data["ticket_id"],
                "ticket_type": data["ticket_type"],
                "date": data["date"]
            })
            
            # Notify user
            lang = data["lang"]
            ticket_name = TICKET_TYPES[data["ticket_type"]][lang]["name"]
            await bot.send_message(
                user_id,
                f"‚úÖ –í–∞—à –±–∏–ª–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
                f"üéü {ticket_name}\n"
                f"üÜî –ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞: #{data['ticket_id']}\n\n"
                f"–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ." if lang == "ru" else
                f"‚úÖ Biletiniz t…ôsdiql…ôndi!\n\n"
                f"üéü {ticket_name}\n"
                f"üÜî Bilet n√∂mr…ôsi: #{data['ticket_id']}\n\n"
                f"T…ôdbir…ô giri≈ü √º√ß√ºn bu n√∂mr…ôni saxlayƒ±n." if lang == "az" else
                f"‚úÖ Your ticket is approved!\n\n"
                f"üéü {ticket_name}\n"
                f"üÜî Ticket ID: #{data['ticket_id']}\n\n"
                f"Save this number for event entry."
            )
            
            await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{data['ticket_id']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
            
        elif command == "reject":
            reason = message.text.split(maxsplit=2)[2] if len(message.text.split()) > 2 else (
                "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞" if data["lang"] == "ru" else
                "S…ôb…ôb g√∂st…ôrilm…ôyib" if data["lang"] == "az" else
                "No reason provided"
            )
            
            # Notify user
            lang = data["lang"]
            await bot.send_message(
                user_id,
                f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º." if lang == "ru" else
                f"‚ùå M√ºraci…ôtiniz r…ôdd edildi\n\n"
                f"S…ôb…ôb: {reason}\n\n"
                f"∆èg…ôr s…ôhv olduƒüunu d√º≈ü√ºn√ºrs√ºn√ºzs…ô, administratorla …ôlaq…ô saxlayƒ±n." if lang == "az" else
                f"‚ùå Your application was rejected\n\n"
                f"Reason: {reason}\n\n"
                f"If you think this is a mistake, please contact admin."
            )
            
            await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{data['ticket_id']} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
        del pending_approvals[user_id]
        
    except Exception as e:
        logger.error(f"Admin error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã. –§–æ—Ä–º–∞—Ç:\n"
                           "/approve_12345 - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\n"
                           "/reject_12345 –ø—Ä–∏—á–∏–Ω–∞ - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å")

async def main():
    # Start polling (ignore PORT since we're not using webhooks)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
