import os
import random
import string
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiohttp import web

# --- Configuration ---
TOKEN = os.getenv("TELEGRAM_TOKEN")  # Set in Render environment
ADMIN_ID = 1291104906  # Your Telegram ID
PORT = int(os.getenv("PORT", "10001"))  # Try 10001-10025
PAYMENT_CARD = "4169 7388 9268 3164"

# --- Setup ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)
dp = Dispatcher()

# --- Ticket Data ---
TICKETS = {
    'standard': {
        'ru': ('–°—Ç–∞–Ω–¥–∞—Ä—Ç (20 AZN)', '‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏\n‚Ä¢ Fan Zone'),
        'az': ('Standart (20 AZN)', '‚Ä¢ Salam kokteyll…ôri\n‚Ä¢ Fan Zone'),
        'en': ('Standard (20 AZN)', '‚Ä¢ Welcome cocktails\n‚Ä¢ Fan Zone')
    },
    'vip_single': {
        'ru': ('VIP (40 AZN)', '‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ\n‚Ä¢ –ö–æ–∫—Ç–µ–π–ª—å'),
        'az': ('VIP (40 AZN)', '‚Ä¢ F…ôrdi yer\n‚Ä¢ Kokteyl'),
        'en': ('VIP (40 AZN)', '‚Ä¢ Individual seat\n‚Ä¢ Cocktail')
    },
    'exclusive_single': {
        'ru': ('Exclusive (60 AZN)', '‚Ä¢ –î–æ—Å—Ç—É–ø –∫ DJ\n‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ'),
        'az': ('Exclusive (60 AZN)', '‚Ä¢ DJ giri≈üi\n‚Ä¢ F…ôrdi yer'),
        'en': ('Exclusive (60 AZN)', '‚Ä¢ DJ access\n‚Ä¢ Individual seat')
    },
    'exclusive_table': {
        'ru': ('Exclusive –°—Ç–æ–ª–∏–∫ (240 AZN)', '‚Ä¢ VIP –∑–æ–Ω–∞\n‚Ä¢ –°—Ç–æ–ª–∏–∫ –Ω–∞ 4\n‚Ä¢ 4 –∫–æ–∫—Ç–µ–π–ª—è'),
        'az': ('Exclusive Masa (240 AZN)', '‚Ä¢ VIP zona\n‚Ä¢ 4 n…ôf…ôrlik masa\n‚Ä¢ 4 kokteyl'),
        'en': ('Exclusive Table (240 AZN)', '‚Ä¢ VIP area\n‚Ä¢ Table for 4\n‚Ä¢ 4 cocktails')
    }
}

# --- Web Server for Render ---
async def health_check(request):
    return web.Response(text="Bot is running")

async def run_web_server():
    app = web.Application()
    app.router.add_get("/", health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    try:
        site = web.TCPSite(runner, "0.0.0.0", PORT)
        await site.start()
        logger.info(f"üåê Health check running on port {PORT}")
    except OSError as e:
        logger.error(f"Port {PORT} unavailable, trying fallback...")
        site = web.TCPSite(runner, "0.0.0.0", 10002)  # Fallback port
        await site.start()

# --- Bot Handlers ---
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Dil se√ßin / Select language:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton(text="üá¶üáø Az…ôrbaycan")],
                [KeyboardButton(text="üá¨üáß English")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¶üáø Az…ôrbaycan", "üá¨üáß English"]))
async def set_language(message: types.Message):
    lang = "ru" if "üá∑üá∫" in message.text else "az" if "üá¶üáø" in message.text else "en"
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–ª–µ—Ç:" if lang == "ru" else "Bilet se√ßin:" if lang == "az" else "Select ticket:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=TICKETS[t][lang][0])] for t in TICKETS
            ] + [[KeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == "ru" else "‚¨ÖÔ∏è Geri" if lang == "az" else "‚¨ÖÔ∏è Back"
            )]],
            resize_keyboard=True
        )
    )

# --- Main ---
async def main():
    await asyncio.gather(
        run_web_server(),
        dp.start_polling(bot)
    )

if __name__ == "__main__":
    if not TOKEN:
        raise ValueError("‚ùå TELEGRAM_TOKEN not set in environment variables!")
    logging.info("Starting bot...")
    asyncio.run(main())
