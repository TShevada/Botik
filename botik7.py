import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# --- CONFIG ---
TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_BOT_TOKEN")
PORT = 10001
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- STATES ---
class Form(StatesGroup):
    name = State()
    phone = State()
    photo = State()

# --- TICKET DATA ---
TICKET_TYPES = {
    "standard": {
        "ru": ["–°—Ç–∞–Ω–¥–∞—Ä—Ç (20 –ê–ó–ù)", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏, Fan Zone"],
        "az": ["Standart (20 AZN)", "Xo≈ü g…ôlmisiniz kokteyll…ôri, Fan Zone"],
        "en": ["Standard (20 AZN)", "Welcome cocktails, Fan Zone"]
    },
    "vip_single": {
        "ru": ["VIP –û–¥–∏–Ω–æ—á–Ω—ã–π (40 –ê–ó–ù)", "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ, –ö–æ–∫—Ç–µ–π–ª—å"],
        "az": ["VIP T…ôk (40 AZN)", "F…ôrdi oturacaq, Kokteyl"],
        "en": ["VIP Single (40 AZN)", "Individual seat, Cocktail"]
    },
    "vip_table": {
        "ru": ["VIP –°—Ç–æ–ª–∏–∫ (160 –ê–ó–ù)", "–°—Ç–æ–ª –Ω–∞ 4, –ö–æ–∫—Ç–µ–π–ª–∏"],
        "az": ["VIP Masa (160 AZN)", "4 n…ôf…ôrlik masa, Kokteyll…ôr"],
        "en": ["VIP Table (160 AZN)", "Table for 4, Cocktails"]
    },
    "exclusive_single": {
        "ru": ["Exclusive –û–¥–∏–Ω–æ—á–Ω—ã–π (60 –ê–ó–ù)", "–î–æ—Å—Ç—É–ø –∫ DJ, –ú–µ—Å—Ç–æ"],
        "az": ["Exclusive T…ôk (60 AZN)", "DJ giri≈üi, Oturacaq"],
        "en": ["Exclusive Single (60 AZN)", "DJ access, Seat"]
    },
    "exclusive_table": {
        "ru": ["Exclusive –°—Ç–æ–ª–∏–∫ (240 –ê–ó–ù)", "VIP –∑–æ–Ω–∞, –°—Ç–æ–ª –Ω–∞ 4"],
        "az": ["Exclusive Masa (240 AZN)", "VIP zona, 4 n…ôf…ôrlik masa"],
        "en": ["Exclusive Table (240 AZN)", "VIP area, Table for 4"]
    }
}

# --- KEYBOARDS ---
def get_lang_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton(text="üá¶üáø Az…ôrbaycan")],
            [KeyboardButton(text="üá¨üáß English")]
        ],
        resize_keyboard=True
    )

def get_ticket_keyboard(lang):
    buttons = []
    for ticket_type in TICKET_TYPES:
        buttons.append([KeyboardButton(text=TICKET_TYPES[ticket_type][lang][0])])
    buttons.append([KeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == "ru" else "‚¨ÖÔ∏è Geri" if lang == "az" else "‚¨ÖÔ∏è Back"
    )])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# --- HANDLERS ---
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Dil se√ßin / Select language:", 
                        reply_markup=get_lang_keyboard())

@dp.message(F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¶üáø Az…ôrbaycan", "üá¨üáß English"]))
async def set_language(message: types.Message, state: FSMContext):
    lang = "ru" if "üá∑üá∫" in message.text else "az" if "üá¶üáø" in message.text else "en"
    await state.update_data(lang=lang)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:" if lang == "ru" else 
        "Ad v…ô soyadƒ±nƒ±zƒ± daxil edin:" if lang == "az" else 
        "Enter your full name:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(Form.name)

@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    lang = data.get('lang', 'en')
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:" if lang == "ru" else
        "Telefon n√∂mr…ônizi daxil edin:" if lang == "az" else
        "Enter your phone number:"
    )
    await state.set_state(Form.phone)

@dp.message(Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    if not message.text.replace('+', '').isdigit():
        data = await state.get_data()
        lang = data.get('lang', 'en')
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:" if lang == "ru" else
            "Yanlƒ±≈ü n√∂mr…ô. Yenid…ôn c…ôhd edin:" if lang == "az" else
            "Invalid number. Try again:"
        )
        return
    
    await state.update_data(phone=message.text)
    data = await state.get_data()
    lang = data.get('lang', 'en')
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–ª–µ—Ç:" if lang == "ru" else "Bilet se√ßin:" if lang == "az" else "Select ticket:",
        reply_markup=get_ticket_keyboard(lang)
    )
    await state.set_state(Form.photo)

@dp.message(Form.photo)
async def process_ticket(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('lang', 'en')
    
    # Check if message is a photo
    if message.photo:
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞." if lang == "ru" else
            "T…ô≈ü…ôkk√ºrl…ôr! M√ºraci…ôtiniz q…ôbul edildi." if lang == "az" else
            "Thank you! Your application has been received."
        )
        await state.clear()
        return
    
    # Handle ticket selection
    for ticket_type in TICKET_TYPES:
        if TICKET_TYPES[ticket_type][lang][0] in message.text:
            await state.update_data(ticket_type=ticket_type)
            await message.answer(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã:" if lang == "ru" else
                "√ñd…ôni≈ü ≈ü…ôklini g√∂nd…ôrin:" if lang == "az" else
                "Send payment photo:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–ª–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:" if lang == "ru" else
        "Siyahƒ±dan bilet se√ßin:" if lang == "az" else
        "Select ticket from the list:",
        reply_markup=get_ticket_keyboard(lang)
    )

# --- RUN ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
