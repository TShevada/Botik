import os
import random
import string
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from collections import defaultdict

# --- Configuration ---
TOKEN = os.getenv("TELEGRAM_TOKEN")  # Set in Render environment
ADMIN_ID = 1291104906  # Your Telegram ID
PAYMENT_CARD = "4169 7388 9268 3164"  # Your payment card
PHOTOS_DIR = "payment_screenshots"

# --- Setup ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
os.makedirs(PHOTOS_DIR, exist_ok=True)

bot = Bot(token=TOKEN, parse_mode=ParseMode.MARKDOWN)
dp = Dispatcher()

# --- Storage ---
user_data = {}
pending_approvals = {}

# --- Ticket Data with Both Exclusive Types ---
TICKETS = {
    'standard': {
        'ru': ('–°—Ç–∞–Ω–¥–∞—Ä—Ç (20 AZN)', '‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏\n‚Ä¢ Fan Zone'),
        'az': ('Standart (20 AZN)', '‚Ä¢ Salam kokteyll…ôri\n‚Ä¢ Fan Zone'),
        'en': ('Standard (20 AZN)', '‚Ä¢ Welcome cocktails\n‚Ä¢ Fan Zone')
    },
    'vip_single': {
        'ru': ('VIP (40 AZN)', '‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ\n‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å'),
        'az': ('VIP (40 AZN)', '‚Ä¢ F…ôrdi yer\n‚Ä¢ Salam kokteyli'),
        'en': ('VIP (40 AZN)', '‚Ä¢ Individual seat\n‚Ä¢ Welcome cocktail')
    },
    'vip_table': {
        'ru': ('VIP –°—Ç–æ–ª–∏–∫ (160 AZN)', '‚Ä¢ –°—Ç–æ–ª–∏–∫ –Ω–∞ 4 —á–µ–ª–æ–≤–µ–∫\n‚Ä¢ 4 –∫–æ–∫—Ç–µ–π–ª—è'),
        'az': ('VIP Masa (160 AZN)', '‚Ä¢ 4 n…ôf…ôrlik masa\n‚Ä¢ 4 kokteyl'),
        'en': ('VIP Table (160 AZN)', '‚Ä¢ Table for 4\n‚Ä¢ 4 cocktails')
    },
    'exclusive_single': {
        'ru': ('Exclusive (60 AZN)', '‚Ä¢ –î–æ—Å—Ç—É–ø –∫ DJ\n‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ'),
        'az': ('Exclusive (60 AZN)', '‚Ä¢ DJ giri≈üi\n‚Ä¢ F…ôrdi yer'),
        'en': ('Exclusive (60 AZN)', '‚Ä¢ DJ access\n‚Ä¢ Individual seat')
    },
    'exclusive_table': {
        'ru': ('Exclusive –°—Ç–æ–ª–∏–∫ (240 AZN)', '‚Ä¢ VIP –∑–æ–Ω–∞\n‚Ä¢ –°—Ç–æ–ª–∏–∫ –Ω–∞ 4\n‚Ä¢ 4 –∫–æ–∫—Ç–µ–π–ª—è'),
        'az': ('Exclusive Masa (240 AZN)', '‚Ä¢ VIP zona\n‚Ä¢ 4 n…ôf…ôrlik masa\n‚Ä¢ 4 kokteyl'),
        'en': ('Exclusive Table (240 AZN)', '‚Ä¢ VIP area\n‚Ä¢ Table for 4\n‚Ä¢ 4 cocktails')
    }
}

# --- Helper Functions ---
def generate_order_code():
    """Creates unique 8-character alphanumeric codes"""
    chars = string.ascii_uppercase + string.digits
    while True:
        code = ''.join(random.choices(chars, k=8))
        if code not in pending_approvals:  # Ensure uniqueness
            return code

def get_lang_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton(text="üá¶üáø Az…ôrbaycan")],
            [KeyboardButton(text="üá¨üáß English")]
        ],
        resize_keyboard=True
    )

def get_ticket_keyboard(lang):
    buttons = [[KeyboardButton(text=TICKETS[t][lang][0])] for t in TICKETS]
    buttons.append([KeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == "ru" else "‚¨ÖÔ∏è Geri" if lang == "az" else "‚¨ÖÔ∏è Back"
    )])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏", callback_data="admin_orders")]
    ])

# --- Handlers ---
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Dil se√ßin / Select language:",
        reply_markup=get_lang_keyboard()
    )

@dp.message(F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¶üáø Az…ôrbaycan", "üá¨üáß English"]))
async def set_language(message: types.Message):
    lang = "ru" if "üá∑üá∫" in message.text else "az" if "üá¶üáø" in message.text else "en"
    user_data[message.from_user.id] = {"lang": lang, "step": "name"}
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:" if lang == "ru" else
        "Ad v…ô soyadƒ±nƒ±zƒ± daxil edin:" if lang == "az" else
        "Enter your full name:",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(lambda m: user_data.get(m.from_user.id, {}).get("step") == "name")
async def process_name(message: types.Message):
    if len(message.text.split()) < 2:
        lang = user_data[message.from_user.id]["lang"]
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:" if lang == "ru" else
            "Ad v…ô soyadƒ±nƒ±zƒ± daxil edin:" if lang == "az" else
            "Please enter both first and last name:"
        )
        return
    
    user_data[message.from_user.id].update({
        "name": message.text,
        "step": "phone"
    })
    
    lang = user_data[message.from_user.id]["lang"]
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:" if lang == "ru" else
        "Telefon n√∂mr…ônizi daxil edin:" if lang == "az" else
        "Enter your phone number:"
    )

@dp.message(lambda m: user_data.get(m.from_user.id, {}).get("step") == "phone")
async def process_phone(message: types.Message):
    if not message.text.replace('+', '').isdigit():
        lang = user_data[message.from_user.id]["lang"]
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:" if lang == "ru" else
            "Yanlƒ±≈ü telefon n√∂mr…ôsi. Yenid…ôn c…ôhd edin:" if lang == "az" else
            "Invalid phone number. Try again:"
        )
        return
    
    user_data[message.from_user.id].update({
        "phone": message.text,
        "step": "ticket"
    })
    
    lang = user_data[message.from_user.id]["lang"]
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–ª–µ—Ç:" if lang == "ru" else "Bilet se√ßin:" if lang == "az" else "Select ticket:",
        reply_markup=get_ticket_keyboard(lang)
    )

@dp.message(F.text.in_([TICKETS[t][lang][0] for t in TICKETS for lang in ['ru', 'az', 'en']]))
async def process_ticket(message: types.Message):
    user_id = message.from_user.id
    lang = user_data[user_id]["lang"]
    
    # Find selected ticket
    for ticket_type in TICKETS:
        if TICKETS[ticket_type][lang][0] in message.text:
            user_data[user_id].update({
                "ticket_type": ticket_type,
                "ticket_name": TICKETS[ticket_type][lang][0],
                "step": "payment"
            })
            break
    
    # Payment instructions
    await message.answer(
        f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ {user_data[user_id]['ticket_name']} –Ω–∞ –∫–∞—Ä—Ç—É:\n"
        f"<code>{PAYMENT_CARD}</code>\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã:" if lang == "ru" else
        f"üí≥ {user_data[user_id]['ticket_name']} kartƒ±na k√∂√ß√ºr√ºn:\n"
        f"<code>{PAYMENT_CARD}</code>\n\n"
        "üì∏ √ñd…ôni≈ü skrin≈üotu g√∂nd…ôrin:" if lang == "az" else
        f"üí≥ Pay {user_data[user_id]['ticket_name']} to card:\n"
        f"<code>{PAYMENT_CARD}</code>\n\n"
        "üì∏ Send payment screenshot:",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(F.photo, lambda m: user_data.get(m.from_user.id, {}).get("step") == "payment")
async def process_payment(message: types.Message):
    user_id = message.from_user.id
    user_info = user_data[user_id]
    lang = user_info["lang"]
    
    # Generate unique order code
    order_code = generate_order_code()
    
    # Save payment photo
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    photo_path = f"{PHOTOS_DIR}/{order_code}.jpg"
    await bot.download_file(file.file_path, photo_path)
    
    # Store order with all details
    pending_approvals[order_code] = {
        "user_id": user_id,
        "name": user_info["name"],
        "phone": user_info["phone"],
        "ticket_type": user_info["ticket_type"],
        "ticket_name": user_info["ticket_name"],
        "photo_path": photo_path,
        "lang": lang,
        "approved": None
    }
    
    # Notify admin
    admin_text = (
        f"üÜî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*: `{order_code}`\n"
        f"üë§ {user_info['name']}\n"
        f"üìû {user_info['phone']}\n"
        f"üéü {user_info['ticket_name']}\n\n"
        f"üí¨ –û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π:\n"
        f"/approve - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\n"
        f"/reject [–ø—Ä–∏—á–∏–Ω–∞] - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å"
    )
    
    await bot.send_photo(
        ADMIN_ID,
        photo.file_id,
        caption=admin_text
    )
    
    # Confirm to user
    user_text = {
        "ru": f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        "az": f"‚úÖ #{order_code} m√ºraci…ôti g√∂nd…ôrildi!\nT…ôsdiq g√∂zl…ôyin.",
        "en": f"‚úÖ Order #{order_code} submitted!\nAwaiting approval."
    }[lang]
    
    await message.answer(user_text)
    del user_data[user_id]

# --- Admin Commands ---
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    stats_text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫*\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {len(pending_approvals)}\n"
        f"‚Ä¢ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {len([x for x in pending_approvals.values() if x['approved'] is None])}\n"
        f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {len([x for x in pending_approvals.values() if x['approved'] is True])}\n"
        f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {len([x for x in pending_approvals.values() if x['approved'] is False])}"
    )
    
    await message.answer(stats_text, reply_markup=get_admin_keyboard())

@dp.callback_query(F.data == "admin_stats")
async def admin_stats(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
    
    stats_text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫*\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {len(pending_approvals)}\n"
        f"‚Ä¢ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {len([x for x in pending_approvals.values() if x['approved'] is None])}\n"
        f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {len([x for x in pending_approvals.values() if x['approved'] is True])}\n"
        f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {len([x for x in pending_approvals.values() if x['approved'] is False])}"
    )
    
    await callback.message.edit_text(stats_text, reply_markup=get_admin_keyboard())

@dp.callback_query(F.data == "admin_orders")
async def admin_orders(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
    
    pending = [x for x in pending_approvals.items() if x[1]['approved'] is None][:5]
    
    if not pending:
        await callback.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏")
        return
    
    orders_text = "üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:*\n\n"
    for code, data in pending:
        orders_text += (
            f"üÜî –ö–æ–¥: `{code}`\n"
            f"üë§ {data['name']}\n"
            f"üìû {data['phone']}\n"
            f"üéü {data['ticket_name']}\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        )
    
    await callback.message.edit_text(orders_text, reply_markup=get_admin_keyboard())

@dp.message(Command("approve"))
async def approve_order(message: types.Message):
    if message.from_user.id != ADMIN_ID or not message.reply_to_message:
        return
    
    try:
        order_code = message.reply_to_message.caption.split("`")[1]
        order = pending_approvals.get(order_code)
        
        if not order:
            await message.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # Mark as approved
        order["approved"] = True
        
        # Notify user
        lang = order["lang"]
        confirm_text = {
            "ru": (
                f"üéâ –í–∞—à –±–∏–ª–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                f"üî¢ –ù–æ–º–µ—Ä: `{order_code}`\n"
                f"üé´ {order['ticket_name']}\n\n"
                f"‚ùóÔ∏è –ë–∏–ª–µ—Ç—ã –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É"
            ),
            "az": (
                f"üéâ Biletiniz t…ôsdiql…ôndi!\n"
                f"üî¢ N√∂mr…ô: `{order_code}`\n"
                f"üé´ {order['ticket_name']}\n\n"
                f"‚ùóÔ∏è Biletl…ôr geri qaytarƒ±lmƒ±r"
            ),
            "en": (
                f"üéâ Ticket confirmed!\n"
                f"üî¢ Number: `{order_code}`\n"
                f"üé´ {order['ticket_name']}\n\n"
                f"‚ùóÔ∏è Non-refundable"
            )
        }[lang]
        
        await bot.send_message(order["user_id"], confirm_text)
        await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ {order_code} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"Approve error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

@dp.message(Command("reject"))
async def reject_order(message: types.Message):
    if message.from_user.id != ADMIN_ID or not message.reply_to_message:
        return
    
    try:
        order_code = message.reply_to_message.caption.split("`")[1]
        order = pending_approvals.get(order_code)
        
        if not order:
            await message.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        reason = " ".join(message.text.split()[1:]) or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        # Mark as rejected
        order["approved"] = False
        
        # Notify user
        lang = order["lang"]
        reject_text = {
            "ru": (
                f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–Ω–æ–≤–æ"
            ),
            "az": (
                f"‚ùå M√ºraci…ôt r…ôdd edildi\n"
                f"S…ôb…ôb: {reason}\n\n"
                f"Yenid…ôn sifari≈ü verin"
            ),
            "en": (
                f"‚ùå Application rejected\n"
                f"Reason: {reason}\n\n"
                f"Please try again"
            )
        }[lang]
        
        await bot.send_message(
            order["user_id"],
            reject_text,
            reply_markup=get_lang_keyboard()
        )
        await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ {order_code} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"Reject error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")

# --- Main ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.info("Starting bot...")
    asyncio.run(main())
