import os
import random
import string
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7883966462:AAG2udLydnyXDibLWyw8WrlVntzUB-KMXfE"
ADMIN_ID = 1291104906
PAYMENT_CARD = "4169 7388 9268 3164"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
pending_orders = {}
completed_orders = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    lang = State()
    name = State()
    phone = State()
    ticket = State()
    photo = State()

# –î–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç–æ–≤
TICKETS = {
    'ru': {
        'standard': ('–°—Ç–∞–Ω–¥–∞—Ä—Ç (20 –ê–ó–ù)', '–ö–æ–∫—Ç–µ–π–ª–∏, Fan Zone'),
        'vip_single': ('VIP (40 –ê–ó–ù)', '–ú–µ—Å—Ç–æ + –∫–æ–∫—Ç–µ–π–ª—å'),
        'vip_table': ('VIP –°—Ç–æ–ª–∏–∫ (160 –ê–ó–ù)', '–°—Ç–æ–ª –Ω–∞ 4'),
        'exclusive_single': ('Exclusive (60 –ê–ó–ù)', '–î–æ—Å—Ç—É–ø –∫ DJ'),
        'exclusive_table': ('Exclusive (240 –ê–ó–ù)', 'VIP –∑–æ–Ω–∞ + —Å—Ç–æ–ª') 
    },
    'az': {
        'standard': ('Standart (20 AZN)', 'Kokteyll…ôr, Fan Zone'),
        'vip_single': ('VIP (40 AZN)', 'Oturacaq + kokteyl'),
        'vip_table': ('VIP Masa (160 AZN)', '4 n…ôf…ôrlik masa'),
        'exclusive_single': ('Exclusive (60 AZN)', 'DJ giri≈üi'),
        'exclusive_table': ('Exclusive (240 AZN)', 'VIP zona + masa')
    },
    'en': {
        'standard': ('Standard (20 AZN)', 'Cocktails, Fan Zone'),
        'vip_single': ('VIP (40 AZN)', 'Seat + cocktail'),
        'vip_table': ('VIP Table (160 AZN)', 'Table for 4'),
        'exclusive_single': ('Exclusive (60 AZN)', 'DJ access'),
        'exclusive_table': ('Exclusive (240 AZN)', 'VIP area + table')
    }
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –±–∏–ª–µ—Ç–∞
def generate_order_code():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_lang_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π")],
            [KeyboardButton(text="üá¶üáø Az…ôrbaycan")],
            [KeyboardButton(text="üá¨üáß English")]
        ],
        resize_keyboard=True
    )

def get_ticket_keyboard(lang):
    buttons = [[KeyboardButton(text=TICKETS[lang][t][0])] for t in TICKETS[lang]]
    buttons.append([KeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == "ru" else "‚¨ÖÔ∏è Geri" if lang == "az" else "‚¨ÖÔ∏è Back"
    )])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.set_state(Form.lang)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Dil se√ßin / Select language:", 
                        reply_markup=get_lang_keyboard())

@dp.message(Form.lang)
async def set_lang(message: types.Message, state: FSMContext):
    lang = "ru" if "üá∑üá∫" in message.text else "az" if "üá¶üáø" in message.text else "en"
    await state.update_data(lang=lang)
    await state.set_state(Form.name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:" if lang == "ru" else 
        "Ad v…ô soyadƒ±nƒ±zƒ± daxil edin:" if lang == "az" else 
        "Enter your full name:",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.phone)
    data = await state.get_data()
    lang = data['lang']
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:" if lang == "ru" else
        "Telefon n√∂mr…ônizi daxil edin:" if lang == "az" else
        "Enter phone number:"
    )

@dp.message(Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    if not message.text.replace('+', '').isdigit():
        data = await state.get_data()
        lang = data['lang']
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:" if lang == "ru" else
            "Yanlƒ±≈ü n√∂mr…ô. Yenid…ôn c…ôhd edin:" if lang == "az" else
            "Invalid number. Try again:"
        )
        return
    
    await state.update_data(phone=message.text)
    data = await state.get_data()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–ª–µ—Ç:" if data['lang'] == "ru" else 
        "Bilet se√ßin:" if data['lang'] == "az" else 
        "Select ticket:",
        reply_markup=get_ticket_keyboard(data['lang'])
    )
    await state.set_state(Form.ticket)

@dp.message(Form.ticket)
async def process_ticket(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data['lang']
    
    # –ü–æ–∏—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞
    selected = None
    for ticket_type in TICKETS[lang]:
        if TICKETS[lang][ticket_type][0] in message.text:
            selected = ticket_type
            break
    
    if not selected:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–ª–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:" if lang == "ru" else
            "Siyahƒ±dan bilet se√ßin:" if lang == "az" else
            "Select ticket from list:",
            reply_markup=get_ticket_keyboard(lang)
        )
        return
    
    order_code = generate_order_code()
    await state.update_data(ticket_type=selected, order_code=order_code)
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ
    await message.answer(
        f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ {TICKETS[lang][selected][0]} –Ω–∞ –∫–∞—Ä—Ç—É:\n"
        f"<code>{PAYMENT_CARD}</code>\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã:" if lang == "ru" else
        f"üí≥ {TICKETS[lang][selected][0]} kartƒ±na k√∂√ß√ºr√ºn:\n"
        f"<code>{PAYMENT_CARD}</code>\n\n"
        "üì∏ √ñd…ôni≈ü skrin≈üotu g√∂nd…ôrin:" if lang == "az" else
        f"üí≥ Pay {TICKETS[lang][selected][0]} to card:\n"
        f"<code>{PAYMENT_CARD}</code>\n\n"
        "üì∏ Send payment screenshot:",
        parse_mode="HTML",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(Form.photo)

@dp.message(Form.photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data['lang']
    order_code = data['order_code']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    pending_orders[order_code] = {
        "user_id": message.from_user.id,
        "data": data,
        "photo_id": message.photo[-1].file_id
    }
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_msg = await bot.send_photo(
        ADMIN_ID,
        message.photo[-1].file_id,
        caption=(
            f"üÜî –ö–æ–¥: <code>{order_code}</code>\n"
            f"üë§ {data['name']}\n"
            f"üìû {data['phone']}\n"
            f"üéü {TICKETS[lang][data['ticket_type']][0]}\n\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
            "/approve - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\n"
            "/reject [–ø—Ä–∏—á–∏–Ω–∞] - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å"
        ),
        parse_mode="HTML"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    pending_orders[order_code]["admin_msg_id"] = admin_msg.message_id
    
    await message.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è." if lang == "ru" else
        f"‚úÖ #{order_code} m√ºraci…ôti yoxlanƒ±lƒ±r!\n"
        "T…ôsdiq g√∂zl…ôyin." if lang == "az" else
        f"‚úÖ Application #{order_code} submitted!\n"
        "Awaiting approval.",
        reply_markup=get_lang_keyboard()
    )
    await state.clear()

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("approve"))
async def approve_order(message: types.Message):
    if message.from_user.id != ADMIN_ID or not message.reply_to_message:
        return
    
    order_code = message.reply_to_message.caption.split("\n")[0].split()[-1]
    if order_code not in pending_orders:
        return await message.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    order = pending_orders.pop(order_code)
    completed_orders[order_code] = order
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    lang = order['data']['lang']
    ticket_name = TICKETS[lang][order['data']['ticket_type']][0]
    
    await bot.send_message(
        order['user_id'],
        f"üéâ –í–∞—à –±–∏–ª–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
        f"üî¢ –ù–æ–º–µ—Ä: <code>{order_code}</code>\n"
        f"üé´ {ticket_name}\n\n"
        "‚ùóÔ∏è –ë–∏–ª–µ—Ç—ã –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É" if lang == "ru" else
        f"üéâ Biletiniz t…ôsdiql…ôndi!\n"
        f"üî¢ N√∂mr…ô: <code>{order_code}</code>\n"
        f"üé´ {ticket_name}\n\n"
        "‚ùóÔ∏è Biletl…ôr geri qaytarƒ±lmƒ±r" if lang == "az" else
        f"üéâ Your ticket confirmed!\n"
        f"üî¢ Number: <code>{order_code}</code>\n"
        f"üé´ {ticket_name}\n\n"
        "‚ùóÔ∏è Tickets are non-refundable",
        parse_mode="HTML"
    )
    
    await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ {order_code} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")

@dp.message(Command("reject"))
async def reject_order(message: types.Message):
    if message.from_user.id != ADMIN_ID or not message.reply_to_message:
        return
    
    order_code = message.reply_to_message.caption.split("\n")[0].split()[-1]
    if order_code not in pending_orders:
        return await message.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    reason = " ".join(message.text.split()[1:]) or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    order = pending_orders.pop(order_code)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    lang = order['data']['lang']
    await bot.send_message(
        order['user_id'],
        f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞" if lang == "ru" else
        f"‚ùå M√ºraci…ôt r…ôdd edildi\n"
        f"S…ôb…ôb: {reason}\n\n"
        "Yenid…ôn m√ºraci…ôt edin" if lang == "az" else
        f"‚ùå Application rejected\n"
        f"Reason: {reason}\n\n"
        "Please try again",
        reply_markup=get_lang_keyboard()
    )
    
    await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ {order_code} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
